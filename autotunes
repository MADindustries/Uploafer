#!/usr/bin/env python
import argparse
import beets.ui
import os.path
import re
import shutil
import string
import sys
import textwrap
import whatapi
from beets.autotag import AlbumMatch, Recommendation
from beets.autotag import mb
from beets import importer, autotag, ui
from beetsplug.fetchart import FetchArtPlugin, CoverArtArchive, AlbumArtOrg, Amazon, Wikipedia, FanartTV
from beetsplug.lastgenre import LastGenrePlugin, LASTFM
from beets.ui import print_
from beets.ui.commands import TerminalImportSession, manual_search, dist_string, penalty_string, disambig_string, show_change, manual_id
from beets import config
from beets.util import syspath, normpath, displayable_path, pipeline, sanitize_path


def get_year(path):
    return int(re.search('\d{4}', path.decode(sys.getfilesystemencoding())).group(0))


lastgenre = LastGenrePlugin()


valid_tags = set([
    '1960s', '1970s', '1980s', '1990s', '2000s', '2010s', 'alternative', 'ambient', 'black.metal', 'blues', 'classical',
    'comedy', 'country', 'death.metal', 'deep.house', 'downtempo', 'drum.and.bass', 'dub', 'dubstep', 'electronic',
    'experimental', 'folk', 'funk', 'gospel', 'grime', 'heavy.metal', 'hip.hop', 'house', 'idm', 'indie',
    'instrumental', 'jazz', 'live', 'metal', 'noise', 'pop', 'pop.rock', 'post.punk', 'progressive.rock', 'psychedelic',
    'punk', 'reggae', 'rhythm.and.blues', 'rock', 'shoegaze', 'ska', 'soul', 'synth.pop', 'techno', 'trance',
    'video.game'
])


def get_tags(album):
    last_obj = LASTFM.get_album(album.albumartist, album.album)
    result = set()
    for tag in lastgenre._tags_for(last_obj, lastgenre.config['min_weight'].get(int))[:3]:
        if tag in valid_tags:
            result.add(tag)
    if len(result) < 2:
        last_obj = LASTFM.get_artist(album.albumartist)
        for tag in lastgenre._tags_for(last_obj, lastgenre.config['min_weight'].get(int))[:3]:
            if tag in valid_tags:
                result.add(tag)
    return list(result)[:5]


class AutotunesFetchArt(FetchArtPlugin):
    def __init__(self):
        super().__init__()
        sources = [CoverArtArchive, AlbumArtOrg, Amazon, Wikipedia, FanartTV]
        self.sources = [s(self._log, self.config) for s in sources]


fetchart = AutotunesFetchArt()


class AlbumInfoToAlbum(object):
    def __init__(self, albuminfo):
        self.info = albuminfo

    def __getattr__(self, key):
        if key == "albumartist":
            key = "artist"
        elif key == "mb_albumid":
            key = "album_id"
        elif key == "mb_releasegroupid":
            key = "releasegroup_id"
        return getattr(self.info, key)


class NoneDict(dict):
    def __getitem__(self, key):
        return self.get(key)


def choose_candidate(candidates, singleton, rec, cur_artist=None,
                     cur_album=None, item=None, itemcount=None,
                     extra_choices=[]):
    """Given a sorted list of candidates, ask the user for a selection
    of which candidate to use. Applies to both full albums and
    singletons  (tracks). Candidates are either AlbumMatch or TrackMatch
    objects depending on `singleton`. for albums, `cur_artist`,
    `cur_album`, and `itemcount` must be provided. For singletons,
    `item` must be provided.

    `extra_choices` is a list of `PromptChoice`s, containg the choices
    appended by the plugins after receiving the `before_choose_candidate`
    event. If not empty, the choices are appended to the prompt presented
    to the user.

    Returns one of the following:
    * the result of the choice, which may be SKIP, ASIS, TRACKS, or MANUAL
    * a candidate (an AlbumMatch/TrackMatch object)
    * the short letter of a `PromptChoice` (if the user selected one of
    the `extra_choices`).
    """
    # Sanity check.
    assert not singleton
    assert cur_artist is not None
    assert cur_album is not None

    # Zero candidates.
    if not candidates:
        print_(u"No matching release found for {0} tracks."
               .format(itemcount))
        print_(u'For help, see: '
               u'http://beets.readthedocs.org/en/latest/faq.html#nomatch')
        opts = (u'Skip', u'Enter search', u'enter Id', u'aBort')
        sel = ui.input_options(opts)
        if sel == u'e':
            return importer.action.MANUAL
        elif sel == u's':
            return importer.action.SKIP
        elif sel == u'b':
            raise importer.ImportAbort()
        elif sel == u'i':
            return importer.action.MANUAL_ID
        else:
            assert False

    while True:
        # Display and choose from candidates.
        require = rec <= Recommendation.low

        # Display list of candidates.
        print_(u'Finding tags for {0} "{1} - {2}".'.format(
            u'album', cur_artist, cur_album,
        ))

        print_(u'Candidates:')
        for i, match in enumerate(candidates):
            # Index, metadata, and distance.
            line = [
                u'{0}.'.format(i + 1),
                u'{0} - {1}'.format(
                    match.info.artist,
                    match.info.album,
                ),
                u'({0})'.format(dist_string(match.distance)),
            ]

            # Penalties.
            penalties = penalty_string(match.distance, 3)
            if penalties:
                line.append(penalties)

            # Disambiguation
            disambig = disambig_string(match.info)
            if disambig:
                line.append(ui.colorize('text_highlight_minor',
                                        u'(%s)' % disambig))

            print_(u' '.join(line))

        # Ask the user for a choice.
        opts = (u'Skip', u'Enter search', u'enter Id', u'aBort')
        sel = ui.input_options(opts,
                               numrange=(1, len(candidates)))
        if sel == u's':
            return importer.action.SKIP
        elif sel == u'e':
            return importer.action.MANUAL
        elif sel == u'b':
            raise importer.ImportAbort()
        elif sel == u'i':
            return importer.action.MANUAL_ID
        else:  # Numerical selection.
            match = candidates[sel - 1]
            if sel != 1:
                # When choosing anything but the first match,
                # disable the default action.
                require = True

        # Show what we're about to do.
        show_change(cur_artist, cur_album, match)

        # Exact match => tag automatically.
        if rec == Recommendation.strong:
            return match

        # Ask for confirmation.
        opts = (u'Apply', u'More candidates', u'Skip', u'Enter search',
                u'enter Id', u'aBort')
        default = config['import']['default_action'].as_choice({
            u'apply': u'a',
            u'skip': u's',
            u'none': None,
        })
        if default is None:
            require = True
        sel = ui.input_options(opts, require=require,
                               default=default)
        if sel == u'a':
            return match
        elif sel == u's':
            return importer.action.SKIP
        elif sel == u'e':
            return importer.action.MANUAL
        elif sel == u'b':
            raise importer.ImportAbort()
        elif sel == u'i':
            return importer.action.MANUAL_ID


def choose_match(task):
    """Given an initial autotagging of items, go through an interactive
    dance with the user to ask for a choice of metadata. Returns an
    AlbumMatch object or SKIP.
    """
    # Show what we're tagging.
    print_()
    print_(displayable_path(task.paths, u'\n') +
           u' ({0} items)'.format(len(task.items)))

    # Loop until we have a choice.
    candidates, rec = task.candidates, task.rec
    while True:
        # Ask for a choice from the user.
        choice = choose_candidate(
            candidates, False, rec, task.cur_artist, task.cur_album,
            itemcount=len(task.items)
        )

        # Choose which tags to use.
        if choice is importer.action.SKIP:
            # Pass selection to main control flow.
            return choice
        elif choice is importer.action.MANUAL:
            # Try again with manual search terms.
            search_artist, search_album = manual_search(False)
            _, _, candidates, rec = autotag.tag_album(
                task.items, search_artist, search_album
            )
        elif choice is importer.action.MANUAL_ID:
            # Try a manually-entered ID.
            search_id = manual_id(False)
            if search_id:
                _, _, candidates, rec = autotag.tag_album(
                    task.items, search_ids=search_id.split()
                )
        else:
            # We have a candidate! Finish tagging. Here, choice is an
            # AlbumMatch object.
            assert isinstance(choice, autotag.AlbumMatch)
            return choice


@pipeline.stage
def process_album(session, task):
    if not task or task.skip:
        return

    choice = choose_match(task)
    if not isinstance(choice, AlbumMatch):
        return

    if not choice.info.year and not choice.info.original_year:
        try:
            choice.info.original_year = choice.info.year = get_year(task.toppath)
        except:
            # year not found - skip it
            return

    album = AlbumInfoToAlbum(choice.info)
    if not session.api.is_duplicate(album):
        upload_album(session, task, album)


@pipeline.stage
def lookup_candidates(session, task):
    if not task or task.skip:
        return

    task.lookup_candidates()
    return task


album_template = string.Template("$artist - $album ($year) [$format]")


def rename_album(album, album_dir):
    # TODO: more intelligent truncation
    path = album_template.substitute(
        artist=textwrap.shorten(album.artist, width=50, placeholder="_"),
        album=textwrap.shorten(album.album, width=40, placeholder="_"),
        year=album.year,
        format="FLAC"  # TODO
    )
    if album.catalognum:
        path += " {" + album.catalognum + "}"
    path = path.replace("/", "_").replace("\\", "_")
    path = sanitize_path(path)
    path = os.path.normpath(os.path.join(os.path.join(album_dir, ".."), path))
    shutil.move(album_dir, path)
    return path


def upload_album(session, task, album):
    image = fetchart.art_for_album(album, task.paths, False)
    if image and image.url:
        image_url = image.url
        if not image_url.endswith('.jpg'):
            image_url += '#.jpg'
    else:
        image_url = ""
    tags = get_tags(album)
    if len(tags) == 0:
        tags = input("tags: ").split(", ")
    album_dir = task.toppath.decode(sys.getfilesystemencoding())
    album_dir = rename_album(album, album_dir)
    session.api.upload(album_dir, session.output_dir, album, tags, image_url)


class UploadSession(TerminalImportSession):
    def __init__(self, paths, output_dir, username, password):
        self.want_resume = False
        self.config = NoneDict()
        self.output_dir = output_dir
        self.api = whatapi.WhatAPI(username, password)
        super().__init__(None, None, paths, None)

    def run(self):
        stages = [
            importer.read_tasks(self),
            lookup_candidates(self),
            process_album(self)
        ]
        pl = pipeline.Pipeline(stages)
        pl.run_parallel(importer.QUEUE_SIZE)


def upload_files(paths, output_dir, username, password):
    for path in paths:
        if not os.path.exists(syspath(normpath(path))):
            raise beets.ui.UserError(u'no such file or directory: {0}'.format(
                displayable_path(path)))

    session = UploadSession(paths, output_dir, username, password)
    session.run()


def autotunes_main(args, lib=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("username")
    parser.add_argument("-o", "--output-dir",
                        help="the directory where torrents will be output",
                        default="/srv/torrents")
    parser.add_argument("album", help="path to the album you want to upload", nargs="+")
    args = parser.parse_args()
    mb.configure()
    password = input("password: ")
    upload_files(args.album, args.output_dir, args.username, password)


beets.ui._raw_main = autotunes_main

if __name__ == "__main__":
    beets.ui.main()
